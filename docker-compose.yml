version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-sportapp}
      POSTGRES_USER: ${DB_USER:-sportapp_user}  
      POSTGRES_PASSWORD: ${DB_PASSWORD:-sportapp_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sportapp_user} -d ${DB_NAME:-sportapp}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sportapp-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sportapp-network

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-3500}:3500"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3500
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-sportapp}
      - DB_USER=${DB_USER:-sportapp_user}
      - DB_PASSWORD=${DB_PASSWORD:-sportapp_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:8081}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./server/logs:/app/logs
      - ./server/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sportapp-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - server
    networks:
      - sportapp-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  sportapp-network:
    driver: bridge